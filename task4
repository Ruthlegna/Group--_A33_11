const express = require('express');
const bodyParser = require('body-parser');
const moment = require('moment');

const app = express();
const port = 3000;

let events = [];

app.use(bodyParser.json());

// GET /events
// Returns a list of all events
app.get('/events', (req, res) => {
  res.json(events);
});

// POST /events
// Creates a new event
app.post('/events', (req, res) => {
  const event = req.body;
  event.id = events.length + 1;
  event.start = moment(event.start).toDate();
  event.end = moment(event.end).toDate();
  events.push(event);
  res.json(event);
});

// GET /events/:id
// Returns a single event by ID
app.get('/events/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const event = events.find(e => e.id === id);
  if (event) {
    res.json(event);
  } else {
    res.status(404).json({ message: 'Event not found' });
  }
});

// PUT /events/:id
// Updates an existing event by ID
app.put('/events/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const eventIndex = events.findIndex(e => e.id === id);
  if (eventIndex >= 0) {
    const event = req.body;
    event.id = id;
    event.start = moment(event.start).toDate();
    event.end = moment(event.end).toDate();
    events[eventIndex] = event;
    res.json(event);
  } else {
    res.status(404).json({ message: 'Event not found' });
  }
});

// DELETE /events/:id
// Deletes an existing event by ID
app.delete('/events/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const eventIndex = events.findIndex(e => e.id === id);
  if (eventIndex >= 0) {
    events.splice(eventIndex, 1);
    res.status(204).send();
  } else {
    res.status(404).json({ message: 'Event not found' });
  }
});

app.listen(port, () => {
  console.log(`Calendar scheduler backend listening at http://localhost:${port}`);
});
